// src/app/api/likes/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { Redis } from '@upstash/redis';

// Initialize the Redis client from environment variables.
// Ensure these are set in your Vercel project settings.
const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL!,
  token: process.env.UPSTASH_REDIS_REST_TOKEN!,
});

const LIKES_KEY = 'portfolio:likes';
const VISITOR_PREFIX = 'visitor:'; // We now use a visitor prefix instead of IP
const TTL_SECONDS = 86400; // 24 hours in seconds

/**
 * Handles GET requests to fetch the current like count.
 */
export async function GET() {
  try {
    const likes = await redis.get(LIKES_KEY);
    // Return the count, defaulting to 0 if the key doesn't exist yet.
    return NextResponse.json({ likes: Number(likes) || 0 });
  } catch (error) {
    console.error("Error fetching likes:", error);
    return NextResponse.json({ error: 'Failed to fetch likes' }, { status: 500 });
  }
}

/**
 * Handles POST requests to increment the like count, with per-device rate limiting.
 */
export async function POST(request: NextRequest) {
  // We expect a 'visitorId' generated by FingerprintJS in the request body.
  const { visitorId } = await request.json();

  // Validate that we received a visitorId.
  if (!visitorId) {
    return NextResponse.json({ error: 'Missing Visitor ID.' }, { status: 400 });
  }

  const visitorKey = `${VISITOR_PREFIX}${visitorId}`;

  try {
    // Check if this unique visitor has already liked in the last 24 hours.
    const hasLiked = await redis.get(visitorKey);

    if (hasLiked) {
      return NextResponse.json({ error: 'This device has already liked in the last 24 hours.' }, { status: 429 }); // 429: Too Many Requests
    }

    // Use a Redis transaction to ensure both operations succeed or fail together.
    // This is an atomic operation, preventing race conditions.
    const transaction = redis.multi();
    transaction.incr(LIKES_KEY); // Increment the total likes count.
    transaction.set(visitorKey, '1', { ex: TTL_SECONDS }); // Set the visitor's lock key with a 24-hour expiry.

    const results = await transaction.exec();
    const newLikes = results[0]; // The result of the first command (INCR) is the new like count.

    return NextResponse.json({ likes: newLikes });

  } catch (error) {
    console.error("Error incrementing likes:", error);
    return NextResponse.json({ error: 'Failed to increment likes' }, { status: 500 });
  }
}